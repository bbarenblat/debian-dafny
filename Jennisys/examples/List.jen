class List[T] {
  var list: seq[T]

  constructor Empty()
    ensures list = []

  constructor Singleton(t: T)
    ensures list = [t]

  constructor Double(p: T, q: T)
    ensures list = [p q]
}

model List[T] {
  var root: Node[T]

  frame
    root

  invariant
    root = null ==> |list| = 0
    root != null ==> list = root.list
}

class Node[T] {
  var list: seq[T]

  invariant
    |list| > 0

  constructor Init(t: T)
    ensures list = [t]

  constructor Double(p: T, q: T)
    ensures list = [p q]

  method List() returns (lst: seq[T])
    requires |list| = 1
    ensures lst = list

  method Tail() returns (tail: Node[T])
    ensures |list| = 1 ==> tail = null
    ensures |list| > 1 ==> tail != null && tail.list = list[1..]
}

model Node[T] {
  var data: T
  var next: Node[T]

  frame 
    next

  invariant
    next = null <==> list = [data]
    next != null ==> list = [data] + next.list 
} 
